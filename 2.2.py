__author__ = 'student'
# подключаем модуль разбора параметров командной строки
import argparse
# подключаем модуль sys
import sys

# создаём парсер и описываем все параметры командной строки, которые может
# принимать наша программа
parser = argparse.ArgumentParser(
    # краткое описание программы
    description='Calculations'
)

# описываем позиционные параметры
parser.add_argument(
    # название поля в объекте, где будут сохранены параметры
    'a',
    # название параметров, которое будет отображено в справке
    metavar='A',
    # сообщаем что ожидаются числа с плавающей запятой
    type=float,
    # краткое описание параметров
    help='Первое число'
)
parser.add_argument(
    # короткое название опции
    '-a',
    # длинное название опции
    '--action',
    # парсер сохранит значение True, если встретит эту опцию
    action='store',
    required=True,
    # краткое описание опции
    help='операция'
)
parser.add_argument(
    # название поля в объекте, где будут сохранены параметры
    'b',
    # название параметров, которое будет отображено в справке
    metavar='B',
    # сообщаем что ожидаются числа с плавающей запятой
    type=float,
    # краткое описание параметров
    help='Второе число'
)
# описываем опцию


# описываем опцию
parser.add_argument(
    # короткое название опции
    '-v',
    # длинное название опции
    '--verbose',
    # парсер сохранит значение True, если встретит эту опцию
    action='store_true',
    # краткое описание опции
    help='вывести выражение'
)



# вызываем функцию разбора параметров командной строки
try:
    args = parser.parse_args()
except:
    print('Try another time with correct pars')

# проверяем, что хотя бы один из параметров --mean и --stdev передан

# считаем среднее значение и среднеквадратическое отклонение
a = args.a
b= args.b
act=args.action
def result(a,b,act):
    if act == '+':
        return a+b
    if act == '*':
        return a*b
    if act == '-':
        return a-b
    if act == '/':
        return a/b
if args.verbose:
    print(a,act,b,'=',result(a,b,act))
else:
    print(result(a,b,act))